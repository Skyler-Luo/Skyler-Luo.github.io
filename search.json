[{"title":"Django项目部署到服务器","url":"/posts/27506a3b/","content":"远程连接使用Xshell作为远程连接的工具。使用方法很简单：\n\n将主机IP、端口号（22）以及用户身份认证（用户名：root，密码：XXXXXX）填好即可连接\n\n连接成功后，就能在 XShell 窗口中看到阿里云的欢迎字样了：\nWelcome to Ubuntu 22.04.4 LTS (GNU/Linux 5.15.0-113-generic x86_64) * Documentation:  https://help.ubuntu.com * Management:     https://landscape.canonical.com * Support:        https://ubuntu.com/proWelcome to Alibaba Cloud Elastic Compute Service !\n\n项目部署克隆项目并搭建环境先更新Ubuntu系统上的软件包\nsudo apt updatesudo apt upgrade\n\n接着安装Python及相关工具\napt install python3 python3-pip python3-venv # 指定安装你需要的 Python版本，如 Python3.11\n\n使用 SSH 连接 GitHub，将自己的项目克隆到服务器上\n\n生成 SSH 密钥\n\n按照提示生成 SSH 密钥，并保存到默认位置（通常是 ~&#x2F;.ssh&#x2F;id_rsa）。\nssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;\n\n\n添加 SSH 密钥到 GitHub\n\n打开生成的公钥文件，并复制内容\ncat ~/.ssh/id_rsa.pub\n\n登录到 GitHub，前往 Settings -&gt; SSH and GPG keys -&gt; New SSH key，粘贴公钥并保存。\n\n将项目克隆到本地\n\n创建并进入你想存放项目的目录，然后从 GitHub 中拉取项目代码\ngit clone git@github.com:username/repository.git\n\n\n创建虚拟环境并安装库\n\n进入到项目的根目录后，创建环境并激活\npython3 -m venv venvsource venv/bin/activate\n\n安装库\npip install -r requirements.txt\n\n\n修改 Django 的配置文件 settings.py\n\n# 关闭调试模式DEBUG = False# 允许访问的服务器ALLOWED_HOSTS = [&#x27;*&#x27;]  # 星号表示允许所有的请求，实际部署时改成自己的域名或 IP# 静态文件收集目录STATIC_ROOT = os.path.join(BASE_DIR, &#x27;collected_static&#x27;)\n\n\n收集静态文件、进行数据迁移\n\npython manage.py collectstaticpython manage.py migrate\n\n安装并配置web服务器\n安装Nginx并启动服务\n\napt install nginxservice nginx start\n\n打开浏览器，输入服务器公网 IP 地址，此时可以看见 Nginx 的欢迎界面\n\n配置 Nginx\n\n创建 Nginx 配置文件 /etc/nginx/sites-available/myproject，内容示例如下：\nserver &#123;    listen 80;    server_name your_server_ip;  # 服务器的 IP 地址    location / &#123;        include uwsgi_params;        uwsgi_pass unix:/tmp/your_project.sock;  # 使用Unix套接字    &#125;    location /static/ &#123;        alias /path/to/your/static/;  # 静态文件路径    &#125;    location /media/ &#123;        alias /path/to/your/media/;  # 媒体文件路径    &#125;&#125;\n\n启用配置并重启Nginx\nln -s /etc/nginx/sites-available/myproject /etc/nginx/sites-enablednginx -tsystemctl restart nginx\n\n\n安装Python开发包和uWSGI\n\napt install python3-devpip install uwsgi\n\n\n配置uWSGI\n\n创建 uWSGI 配置文件uwsgi.ini，内容示例如下：\n[uwsgi]# 设置 uWSGI 的工作目录chdir = /home/wasd/projects/your_project# 指定要加载的 WSGI 模块module = your_project.wsgi:application# 启用 uWSGI 主进程模式master = true# 设置工作进程的数量processes = 4# 指定 uWSGI 将监听的 Unix 套接字文件socket = /tmp/your_project.sock# 设置套接字文件的权限chmod-socket = 664# 在服务器停止时自动删除 Unix 套接字文件和 PID 文件vacuum = true\n\n重新启动Nginx，并启动uWSGI服务\nsystemctl restart nginxuwsgi --ini uwsgi.ini --uid www-data --gid www-data --enable-threads\n\n可通过该命令，查看正在运行的 uWSGI 进程\nps aux | grep uwsgi\n如果想终止所有 uWSGI 进程，可使用\nkillall uwsgi\n\n接下来用浏览器访问服务器，可以成功看见Django项目的界面！\n至此，大功告成啦！\n","categories":["软件开发"],"tags":["Python","Django","Git","GitHub","Linux"]}]